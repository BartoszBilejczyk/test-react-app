import{getProjectStats as e,mockProjects as t}from"./mockProjects-smcmqIBy.js";import{mockVoices as o}from"./mockVoices-BxyhVHZh.js";const r=[{id:"instant-speech",name:"Instant speech",description:"Convert text to speech instantly",icon:"🎤",color:"from-blue-500 to-blue-600",href:"/text-to-speech"},{id:"voice-library",name:"Voice Library",description:"Browse and manage voices",icon:"🎭",color:"from-purple-500 to-purple-600",href:"/voice-library"},{id:"projects",name:"Projects",description:"Manage your voice projects",icon:"📁",color:"from-green-500 to-green-600",href:"/projects"},{id:"playground",name:"Playground",description:"Experiment with dubbing and voice effects",icon:"🎬",color:"from-orange-500 to-orange-600",href:"/playground"}],n=(e=4)=>o.slice(0,e),a=()=>{const t=e();return{totalProjects:t.total,totalVoices:o.length,totalDuration:t.totalDuration,monthlyUsage:85}},c=(e=5)=>t.sort((e,t)=>new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime()).slice(0,e).map(e=>({...e,timeAgo:i(e.createdAt),statusColor:s(e.status)})),i=e=>{const t=new Date(e),o=(new Date).getTime()-t.getTime(),r=Math.floor(o/864e5);if(0===r)return"Today";if(1===r)return"Yesterday";if(r<7)return`${r} days ago`;if(r<30){const e=Math.floor(r/7);return`${e} week${e>1?"s":""} ago`}{const e=Math.floor(r/30);return`${e} month${e>1?"s":""} ago`}},s=e=>{switch(e){case"completed":return"text-green-400";case"processing":return"text-yellow-400";case"draft":default:return"text-gray-400";case"failed":return"text-red-400"}};export{a as getDashboardStats,c as getRecentActivity,n as getRecentVoices,r as mockQuickActions};
